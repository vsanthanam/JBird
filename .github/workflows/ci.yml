name: JBird CI
permissions:
  contents: read
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-xcode:
    strategy:
      matrix:
        platform: [macos, maccatalyst, ios, watchos, tvos, visionos]
        scheme: [JBirdCore, JBirdBuilders]
    name: Build with Xcode (${{ matrix.platform }}, ${{ matrix.scheme }})
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build JBird
      run: ./.scripts/build-${{ matrix.platform }}-xcode ${{ matrix.scheme }}
  swiftformat:
    name: Run SwiftFormat
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Lint with SwiftFormat
      run: ./.scripts/lint-swiftformat
  build-macos-spm:
    name: Build JBird (macOS)
    runs-on: macos-15
    outputs:
      artifact-name: macos-build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build JBird
      run: swift build -v --build-path .build
    - name: Compress Build
      run: zip -r build.zip .build
    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: build.zip
  test-macos-spm:
    name: Test JBird (macOS)
    needs: build-macos-spm
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Xcode Version
        run: ./.scripts/xcode-select
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: .
      - name: Decompress Build
        run: unzip build.zip
      - name: Test JBird
        run: swift test
  build-ubuntu-spm:
    name: Build JBird (Ubuntu)
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ubuntu-build
    container:
      image: swift:6.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build JBird
        run: swift build -v --build-path .build
      - name: Install `zip`
        run: apt-get update && apt-get install -y zip
      - name: Compress Build
        run: zip -r build.zip .build
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build
          path: build.zip
  test-ubuntu-spm:
    name: Test JBird (Ubuntu)
    needs: build-ubuntu-spm
    runs-on: ubuntu-latest
    container:
      image: swift:6.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-build
          path: .
      - name: Install `unzip`
        run: apt-get update && apt-get install -y unzip
      - name: Decompress Build
        run: unzip build.zip
      - name: Test JBird
        run: swift test
  clang-format:
    name: Run clang-format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Validate formatting
        run: ./.scripts/lint-clang-format
  lint-docc:
    name: Validate Documentation
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Validate Documentation
      run: ./.scripts/lint-docc
  build-xcframework:
    strategy:
      matrix:
        target: [JBirdCore, JBirdBuilders]
    name: Build XCFramework (${{ matrix.target }})
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build XCFramework
      run: ./.scripts/build-xcframework ${{ matrix.target }}