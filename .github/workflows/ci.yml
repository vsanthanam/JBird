name: JBird CI
permissions:
  contents: read
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      swift: ${{ steps.set.outputs.swift }}
      c: ${{ steps.set.outputs.c }}
      yaml: ${{ steps.set.outputs.yaml }}
      markdown: ${{ steps.set.outputs.markdown }}
      code: ${{ steps.set.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get changed files
        id: changed
        run: |
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "swift=true" >> $GITHUB_OUTPUT
            echo "c=true" >> $GITHUB_OUTPUT
            echo "yaml=true" >> $GITHUB_OUTPUT
            echo "markdown=true" >> $GITHUB_OUTPUT
            echo "code=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }})
          echo "Changed files:"
          echo "$CHANGED_FILES"

          HAS_SWIFT=false
          HAS_C=false
          HAS_YAML=false
          HAS_MD=false
          ONLY_MD=true

          for file in $CHANGED_FILES; do
            [[ "$file" =~ \.swift$ ]] && HAS_SWIFT=true
            [[ "$file" =~ \.c$ || "$file" =~ \.h$ ]] && HAS_C=true
            [[ "$file" =~ \.ya?ml$ ]] && HAS_YAML=true
            [[ "$file" =~ \.md$ ]] && HAS_MD=true

            if [[ ! "$file" =~ \.md$ ]]; then
              ONLY_MD=false
            fi
          done

          echo "swift=$([[ $HAS_SWIFT == true ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "c=$([[ $HAS_C == true ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "yaml=$([[ $HAS_YAML == true ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "markdown=$([[ $HAS_MD == true ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "code=$([[ $ONLY_MD == true ]] && echo false || echo true)" >> $GITHUB_OUTPUT
      - name: Set final outputs
        id: set
        run: |
          echo "swift=${{ steps.changed.outputs.swift }}" >> $GITHUB_OUTPUT
          echo "c=${{ steps.changed.outputs.c }}" >> $GITHUB_OUTPUT
          echo "yaml=${{ steps.changed.outputs.yaml }}" >> $GITHUB_OUTPUT
          echo "markdown=${{ steps.changed.outputs.markdown }}" >> $GITHUB_OUTPUT
          echo "code=${{ steps.changed.outputs.code }}" >> $GITHUB_OUTPUT
  build-xcode:
    strategy:
      matrix:
        include:
          - platform: macos
            scheme: JBirdCore
            displayName: macOS, JBirdCore
          - platform: macos
            scheme: JBirdBuilders
            displayName: macOS, JBirdBuilders
          - platform: maccatalyst
            scheme: JBirdCore
            displayName: Catalyst, JBirdCore
          - platform: maccatalyst
            scheme: JBirdBuilders
            displayName: Catalyst, JBirdBuilders
          - platform: ios
            scheme: JBirdCore
            displayName: iOS, JBirdCore
          - platform: ios
            scheme: JBirdBuilders
            displayName: iOS, JBirdBuilders
          - platform: watchos
            scheme: JBirdCore
            displayName: watchOS, JBirdCore
          - platform: watchos
            scheme: JBirdBuilders
            displayName: watchOS, JBirdBuilders
          - platform: tvos
            scheme: JBirdCore
            displayName: tvOS, JBirdCore
          - platform: tvos
            scheme: JBirdBuilders
            displayName: tvOS, JBirdBuilders
          - platform: visionos
            scheme: JBirdCore
            displayName: visionOS, JBirdCore
          - platform: visionos
            scheme: JBirdBuilders
            displayName: visionOS, JBirdBuilders
    name: Build with Xcode (${{ matrix.displayName }})
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build JBird
      run: ./.scripts/build-${{ matrix.platform }}-xcode ${{ matrix.scheme }}
  swiftformat:
    name: Run SwiftFormat 
    needs: changes
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Lint with SwiftFormat
      run: ./.scripts/lint-swiftformat
  build-macos-spm:
    name: Build JBird (macOS)
    needs: changes
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.c == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: macos-15
    outputs:
      artifact-name: macos-build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build JBird
      run: swift build -v --build-path .build
    - name: Compress Build
      run: zip -r build.zip .build
    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: build.zip
  test-macos-spm:
    name: Test JBird (macOS)
    needs: [build-macos-spm, changes]
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.c == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Xcode Version
        run: ./.scripts/xcode-select
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: .
      - name: Decompress Build
        run: unzip build.zip
      - name: Test JBird
        run: swift test
  build-ubuntu-spm:
    name: Build JBird (Ubuntu)
    needs: changes
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.c == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ubuntu-build
    container:
      image: swift:6.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build JBird
        run: swift build -v --build-path .build
      - name: Install `zip`
        run: apt-get update && apt-get install -y zip
      - name: Compress Build
        run: zip -r build.zip .build
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build
          path: build.zip
  test-ubuntu-spm:
    name: Test JBird (Ubuntu)
    needs: [build-ubuntu-spm, changes]
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.c == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: swift:6.1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-build
          path: .
      - name: Install `unzip`
        run: apt-get update && apt-get install -y unzip
      - name: Decompress Build
        run: unzip build.zip
      - name: Test JBird
        run: swift test
  clang-format:
    name: Run clang-format
    needs: changes
    if: ${{ needs.changes.outputs.c == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Validate formatting
        run: ./.scripts/lint-clang-format
  lint-docc:
    name: Validate Documentation
    needs: changes
    if: ${{ needs.changes.outputs.swift == 'true' || needs.changes.outputs.yaml == 'true' || needs.changes.outputs.markdown == 'true' }}
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Validate Documentation
      run: ./.scripts/lint-docc
  build-xcframework:
    strategy:
      matrix:
        include:
          - target: JBirdCore
          - target: JBirdBuilders
    name: Build XCFramework (${{ matrix.target }})
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Select Xcode Version
      run: ./.scripts/xcode-select
    - name: Build XCFramework
      run: ./.scripts/build-xcframework ${{ matrix.target }}
  validate-pr:
    name: Validate Pull Request
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - build-xcode
      - build-macos-spm
      - test-macos-spm
      - build-ubuntu-spm
      - test-ubuntu-spm
      - build-xcframework
      - swiftformat
      - clang-format
      - lint-docc
    runs-on: ubuntu-latest
    steps:
      - run: echo "âœ… All required jobs completed successfully."